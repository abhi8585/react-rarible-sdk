import Web3 from "web3";
import { Contract } from "web3-eth-contract";
import { PromiEvent } from "web3-core";
import { Ethereum, EthereumContract, EthereumFunctionCall, EthereumSendOptions, EthereumTransaction } from "@rarible/ethereum-provider";
declare type Web3EthereumConfig = {
    web3: Web3;
    from?: string;
    gas?: number;
};
export declare class Web3Ethereum implements Ethereum {
    private readonly config;
    constructor(config: Web3EthereumConfig);
    createContract(abi: any, address?: string): EthereumContract;
    send(method: string, params: any): Promise<any>;
    personalSign(message: string): Promise<string>;
    getFrom(): Promise<string>;
}
export declare class Web3Contract implements EthereumContract {
    private readonly config;
    private readonly contract;
    constructor(config: Web3EthereumConfig, contract: Contract);
    functionCall(name: string, ...args: any): EthereumFunctionCall;
}
export declare class Web3FunctionCall implements EthereumFunctionCall {
    private readonly config;
    private readonly contract;
    private readonly func;
    constructor(config: Web3EthereumConfig, contract: Contract, func: any);
    call(options?: EthereumSendOptions): Promise<any>;
    send(options?: EthereumSendOptions): Promise<EthereumTransaction>;
    getFrom(): Promise<string>;
}
export declare class Web3Transaction implements EthereumTransaction {
    readonly hash: string;
    private readonly promiEvent;
    constructor(hash: string, promiEvent: PromiEvent<any>);
    wait(): Promise<void>;
}
export {};
