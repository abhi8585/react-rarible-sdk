import { Address, Asset, Binary, ConfigurationParameters, NftCollectionControllerApi, NftItem, NftItemControllerApi, NftOwnershipControllerApi, Order, OrderActivityControllerApi, OrderControllerApi } from "@rarible/protocol-api-client";
import { Action } from "@rarible/action";
import { Ethereum } from "@rarible/ethereum-provider";
import { CONFIGS } from "./config";
import { UpserOrderStageId } from "./order/upsert-order";
import { SellRequest } from "./order/sell";
import { SimpleOrder } from "./order/sign-order";
import { FillOrderRequest, FillOrderStageId } from "./order/fill-order";
import { BidRequest } from "./order/bid";
import { MintLazyRequest } from "./nft/mint-lazy";
export interface RaribleSdk {
    order: RaribleOrderSdk;
    nft: RaribleNftSdk;
    /**
     * Checks if approval is needed and executes approve transaction
     * @param owner - owner of the asset
     * @param asset - asset needed to be checked (ERC-20, ERC-721 etc are supported)
     * @param infinite - only valid for ERC-20 (if true, then infinite approval is used)
     */
    approve(owner: Address, asset: Asset, infinite?: (boolean | undefined)): Promise<string | undefined>;
    apis: RaribleApis;
}
export interface RaribleApis {
    nftItem: NftItemControllerApi;
    nftOwnership: NftOwnershipControllerApi;
    order: OrderControllerApi;
    orderActivity: OrderActivityControllerApi;
    nftCollection: NftCollectionControllerApi;
}
export interface RaribleOrderSdk {
    /**
     * Sell asset (create off-chain order and check if approval is needed)
     */
    sell(request: SellRequest): Promise<Action<UpserOrderStageId, [(string | undefined), Binary, Order]>>;
    /**
     * Create bid (create off-chain order and check if approval is needed)
     */
    bid(request: BidRequest): Promise<Action<UpserOrderStageId, [(string | undefined), Binary, Order]>>;
    /**
     * Fill order (buy or accept bid - depending on the order type)
     *
     * @param order order to fill
     * @param request parameters - what amount
     */
    fill(order: SimpleOrder, request: FillOrderRequest): Promise<Action<FillOrderStageId, [(string | undefined), string]>>;
}
export interface RaribleNftSdk {
    /**
     *
     * @param request parameters for item to mint
     */
    mintLazy(request: MintLazyRequest): Promise<NftItem>;
}
export declare function createRaribleSdk(ethereum: Ethereum, env: keyof typeof CONFIGS, configurationParameters?: ConfigurationParameters): RaribleSdk;
