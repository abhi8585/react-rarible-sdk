"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRaribleSdk = void 0;
var protocol_api_client_1 = require("@rarible/protocol-api-client");
var config_1 = require("./config");
var upsert_order_1 = require("./order/upsert-order");
var approve_1 = require("./order/approve");
var sell_1 = require("./order/sell");
var sign_order_1 = require("./order/sign-order");
var fill_order_1 = require("./order/fill-order");
var send_transaction_1 = require("./common/send-transaction");
var bid_1 = require("./order/bid");
var order_1 = require("./order");
var check_asset_type_1 = require("./order/check-asset-type");
var mint_lazy_1 = require("./nft/mint-lazy");
var sign_nft_1 = require("./nft/sign-nft");
var get_make_fee_1 = require("./order/get-make-fee");
function createRaribleSdk(ethereum, env, configurationParameters) {
    var _this = this;
    var config = config_1.CONFIGS[env];
    var apiConfiguration = new protocol_api_client_1.Configuration(__assign(__assign({}, configurationParameters), { basePath: config.basePath }));
    var nftItemControllerApi = new protocol_api_client_1.NftItemControllerApi(apiConfiguration);
    var nftOwnershipControllerApi = new protocol_api_client_1.NftOwnershipControllerApi(apiConfiguration);
    var nftCollectionControllerApi = new protocol_api_client_1.NftCollectionControllerApi(apiConfiguration);
    var nftLazyMintControllerApi = new protocol_api_client_1.NftLazyMintControllerApi(apiConfiguration);
    var orderControllerApi = new protocol_api_client_1.OrderControllerApi(apiConfiguration);
    var orderActivitiesControllerApi = new protocol_api_client_1.OrderActivityControllerApi(apiConfiguration);
    var gatewayControllerApi = new protocol_api_client_1.GatewayControllerApi(apiConfiguration);
    // @ts-ignore
    var notify = send_transaction_1.createPendingLogs.bind(null, gatewayControllerApi, ethereum);
    var sendTx = partialCall(send_transaction_1.sendTransaction, function (hash) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, notify(hash)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    var checkLazyAssetType = partialCall(order_1.checkLazyAssetType, nftItemControllerApi);
    var checkLazyAsset = partialCall(order_1.checkLazyAsset, checkLazyAssetType);
    var checkLazyOrder = partialCall(order_1.checkLazyOrder, checkLazyAsset);
    var checkAssetType = partialCall(check_asset_type_1.checkAssetType, nftItemControllerApi, nftCollectionControllerApi);
    var approve = partialCall(approve_1.approve, ethereum, config.transferProxies);
    var signOrder = partialCall(sign_order_1.signOrder, ethereum, config);
    var getMakeFee = partialCall(get_make_fee_1.getMakeFee, config.fees);
    var upsertOrder = partialCall(upsert_order_1.upsertOrder, getMakeFee, checkLazyOrder, approve, signOrder, orderControllerApi);
    var sell = partialCall(sell_1.sell, nftItemControllerApi, upsertOrder, checkAssetType);
    var bid = partialCall(bid_1.bid, nftItemControllerApi, upsertOrder, checkAssetType);
    var fill = partialCall(fill_order_1.fillOrder, getMakeFee, ethereum, approve, config.exchange);
    var signNft = partialCall(sign_nft_1.signNft, ethereum, config.chainId);
    var mintLazy = partialCall(mint_lazy_1.mintLazy, signNft, nftCollectionControllerApi, nftLazyMintControllerApi);
    return {
        apis: {
            nftItem: nftItemControllerApi,
            nftOwnership: nftOwnershipControllerApi,
            order: orderControllerApi,
            orderActivity: orderActivitiesControllerApi,
            nftCollection: nftCollectionControllerApi,
        },
        approve: approve,
        order: {
            sell: sell,
            fill: fill,
            bid: bid,
        },
        nft: {
            mintLazy: mintLazy,
        },
    };
}
exports.createRaribleSdk = createRaribleSdk;
function partialCall(f) {
    var headArgs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        headArgs[_i - 1] = arguments[_i];
    }
    return function () {
        var tailArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            tailArgs[_i] = arguments[_i];
        }
        return f.apply(void 0, __spreadArray(__spreadArray([], headArgs), tailArgs));
    };
}
