import { Address, Asset, Binary, Order, OrderControllerApi, OrderForm } from "@rarible/protocol-api-client";
import { Action } from "@rarible/action";
import { SimpleOrder } from "./sign-order";
import { GetMakeFeeFunction } from "./get-make-fee";
export declare type UpserOrderStageId = "checkLazyOrder" | "approve" | "sign" | "post";
export declare type UpsertOrderFunction = (order: OrderForm, infinite?: boolean) => Promise<Action<UpserOrderStageId, [string | undefined, Binary, Order]>>;
/**
 * Updates or inserts the order. Also, calls approve (or setApprovalForAll) if needed, signs order message
 * @param order - order to insert/update
 * @param infinite - pass true if you want to use infinite approval for ERC-20 tokens
 */
export declare function upsertOrder(getMakeFee: GetMakeFeeFunction, checkLazyOrder: (form: OrderForm) => Promise<OrderForm>, approve: (owner: Address, asset: Asset, infinite: boolean) => Promise<string | undefined>, signOrder: (order: SimpleOrder) => Promise<Binary>, orderApi: OrderControllerApi, order: OrderForm, infinite?: boolean): Promise<Action<UpserOrderStageId, [string | undefined, Binary, Order]>>;
