"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.invertOrder = void 0;
var types_1 = require("@rarible/types");
var to_bn_1 = require("../common/to-bn");
var is_nft_1 = require("./is-nft");
var ZERO = types_1.toWord("0x0000000000000000000000000000000000000000000000000000000000000000");
function invertOrder(order, amount, maker, salt) {
    if (salt === void 0) { salt = ZERO; }
    var _a = calculateAmounts(to_bn_1.toBn(order.make.value), to_bn_1.toBn(order.take.value), amount, is_nft_1.isNft(order.take.assetType)), makeValue = _a[0], takeValue = _a[1];
    return __assign(__assign({}, order), { make: __assign(__assign({}, order.take), { value: types_1.toBigNumber(makeValue.toString()) }), take: __assign(__assign({}, order.make), { value: types_1.toBigNumber(takeValue.toString()) }), maker: maker, taker: order.maker, salt: salt, signature: undefined });
}
exports.invertOrder = invertOrder;
function calculateAmounts(make, take, amount, bid) {
    if (bid) {
        return [amount, amount.multipliedBy(make).div(take)];
    }
    else {
        return [amount.multipliedBy(take).div(make), amount];
    }
}
