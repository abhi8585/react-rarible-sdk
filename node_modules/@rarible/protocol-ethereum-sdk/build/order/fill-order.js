"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fillOrderSendTx = exports.fillOrder = void 0;
var types_1 = require("@rarible/types");
var action_1 = require("@rarible/action");
var address_1 = require("@rarible/types/build/address");
var to_bn_1 = require("../common/to-bn");
var exchange_v2_1 = require("./contracts/exchange-v2");
var sign_order_1 = require("./sign-order");
var invert_order_1 = require("./invert-order");
var add_fee_1 = require("./add-fee");
function fillOrder(getMakeFee, ethereum, approve, config, order, request) {
    return __awaiter(this, void 0, void 0, function () {
        var makeAsset;
        return __generator(this, function (_a) {
            makeAsset = getMakeAssetV2(getMakeFee, order, request.amount);
            //todo we should wait for approve to be mined
            return [2 /*return*/, action_1.ActionBuilder.create()
                    .then({ id: "approve", run: function () { return approve(order.maker, makeAsset, Boolean(request.infinite)); } })
                    .then({ id: "send-tx", run: function () { return fillOrderSendTx(getMakeFee, ethereum, config, order, request); } })
                    .build()];
        });
    });
}
exports.fillOrder = fillOrder;
function getMakeAssetV2(getMakeFee, order, amount) {
    var inverted = invert_order_1.invertOrder(order, to_bn_1.toBn(amount), types_1.ZERO_ADDRESS);
    var makeFee = getMakeFee(inverted);
    return add_fee_1.addFee(inverted.make, makeFee);
}
function fillOrderSendTx(getMakeFee, ethereum, config, order, request) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = order.type;
                    switch (_a) {
                        case 'RARIBLE_V2': return [3 /*break*/, 1];
                    }
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, fillOrderV2(getMakeFee, ethereum, config.v2, order, request)];
                case 2: return [2 /*return*/, _b.sent()];
                case 3: throw new Error("Unsupported type: " + order.type);
            }
        });
    });
}
exports.fillOrderSendTx = fillOrderSendTx;
function fillOrderV2(getMakeFee, ethereum, contract, order, request) {
    return __awaiter(this, void 0, void 0, function () {
        var address, _a, orderRight;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = address_1.toAddress;
                    return [4 /*yield*/, ethereum.getFrom()];
                case 1:
                    address = _a.apply(void 0, [_b.sent()]);
                    orderRight = __assign(__assign({}, invert_order_1.invertOrder(order, to_bn_1.toBn(request.amount), address)), { data: __assign(__assign({}, order.data), { payouts: request.payouts || [], originFees: request.originFees || [] }) });
                    return [4 /*yield*/, matchOrders(getMakeFee, ethereum, contract, order, orderRight)];
                case 2: return [2 /*return*/, _b.sent()];
            }
        });
    });
}
function matchOrders(getMakeFee, ethereum, contract, left, right) {
    return __awaiter(this, void 0, void 0, function () {
        var exchangeContract, options, tx;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    exchangeContract = exchange_v2_1.createExchangeV2Contract(ethereum, contract);
                    if (left.make.assetType.assetClass === "ETH" && left.salt === ZERO) {
                        options = { value: getRealValue(getMakeFee, left) };
                    }
                    else if (right.make.assetType.assetClass === "ETH" && right.salt === ZERO) {
                        options = { value: getRealValue(getMakeFee, right) };
                    }
                    else {
                        options = {};
                    }
                    return [4 /*yield*/, exchangeContract.functionCall("matchOrders", sign_order_1.orderToStruct(left), left.signature || "0x", sign_order_1.orderToStruct(right), right.signature || "0x").send(options)];
                case 1:
                    tx = _a.sent();
                    return [2 /*return*/, tx.hash];
            }
        });
    });
}
function getRealValue(getMakeFee, order) {
    var fee = getMakeFee(order);
    var make = add_fee_1.addFee(order.make, fee);
    return make.value;
}
var ZERO = types_1.toWord("0x0000000000000000000000000000000000000000000000000000000000000000");
