import { Binary, Order } from "@rarible/protocol-api-client";
import { Address } from "@rarible/types";
import { Ethereum } from "@rarible/ethereum-provider";
import { Config } from "../config/type";
export declare type SimpleOrder = Pick<Order, "data" | "maker" | "taker" | "make" | "take" | "salt" | "start" | "end" | "type" | "signature">;
export declare function signOrder(ethereum: Ethereum, config: Pick<Config, "exchange" | "chainId">, order: SimpleOrder): Promise<Binary>;
export declare function orderToStruct(order: SimpleOrder): {
    maker: Address;
    makeAsset: {
        assetType: {
            assetClass: string;
            data: string;
        };
        value: import("@rarible/protocol-api-client").BigNumber;
    };
    taker: Address;
    takeAsset: {
        assetType: {
            assetClass: string;
            data: string;
        };
        value: import("@rarible/protocol-api-client").BigNumber;
    };
    salt: import("@rarible/protocol-api-client").Word;
    start: number;
    end: number;
    dataType: string;
    data: string;
};
