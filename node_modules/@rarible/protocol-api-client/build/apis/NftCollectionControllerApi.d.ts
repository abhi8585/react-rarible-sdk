/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { NftCollection, NftCollections, NftIndexerApiError, NftTokenId } from '../models';
export interface GenerateNftTokenIdRequest {
    collection: string;
    minter: string;
}
export interface GetNftCollectionByIdRequest {
    collection: string;
}
export interface SearchNftAllCollectionsRequest {
    continuation?: string;
    size?: number;
}
export interface SearchNftCollectionsByOwnerRequest {
    owner: string;
    continuation?: string;
    size?: number;
}
/**
 * no description
 */
export declare class NftCollectionControllerApi extends runtime.BaseAPI {
    /**
     * Returns next available tokenId for minter
     */
    generateNftTokenIdRaw(requestParameters: GenerateNftTokenIdRequest): Promise<GenerateNftTokenIdResponse>;
    /**
     * Returns next available tokenId for minter
     */
    generateNftTokenId(requestParameters: GenerateNftTokenIdRequest): Promise<NftTokenId>;
    /**
     * Returns Collection by address
     */
    getNftCollectionByIdRaw(requestParameters: GetNftCollectionByIdRequest): Promise<GetNftCollectionByIdResponse>;
    /**
     * Returns Collection by address
     */
    getNftCollectionById(requestParameters: GetNftCollectionByIdRequest): Promise<NftCollection>;
    /**
     */
    searchNftAllCollectionsRaw(requestParameters: SearchNftAllCollectionsRequest): Promise<SearchNftAllCollectionsResponse>;
    /**
     */
    searchNftAllCollections(requestParameters: SearchNftAllCollectionsRequest): Promise<NftCollections>;
    /**
     */
    searchNftCollectionsByOwnerRaw(requestParameters: SearchNftCollectionsByOwnerRequest): Promise<SearchNftCollectionsByOwnerResponse>;
    /**
     */
    searchNftCollectionsByOwner(requestParameters: SearchNftCollectionsByOwnerRequest): Promise<NftCollections>;
}
export declare type GenerateNftTokenId200 = {
    status: 200;
    value: NftTokenId;
};
export declare type GenerateNftTokenId500 = {
    status: 500;
    value: NftIndexerApiError;
};
export declare type GenerateNftTokenIdResponse = GenerateNftTokenId200 | GenerateNftTokenId500;
export declare type GetNftCollectionById200 = {
    status: 200;
    value: NftCollection;
};
export declare type GetNftCollectionById500 = {
    status: 500;
    value: NftIndexerApiError;
};
export declare type GetNftCollectionByIdResponse = GetNftCollectionById200 | GetNftCollectionById500;
export declare type SearchNftAllCollections200 = {
    status: 200;
    value: NftCollections;
};
export declare type SearchNftAllCollections500 = {
    status: 500;
    value: NftIndexerApiError;
};
export declare type SearchNftAllCollectionsResponse = SearchNftAllCollections200 | SearchNftAllCollections500;
export declare type SearchNftCollectionsByOwner200 = {
    status: 200;
    value: NftCollections;
};
export declare type SearchNftCollectionsByOwner500 = {
    status: 500;
    value: NftIndexerApiError;
};
export declare type SearchNftCollectionsByOwnerResponse = SearchNftCollectionsByOwner200 | SearchNftCollectionsByOwner500;
