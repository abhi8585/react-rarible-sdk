/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { InvertOrderForm, Order, OrderForm, OrderIndexerApiError, OrdersPagination, Platform, PrepareOrderTxForm, PrepareOrderTxResponse, PreparedOrderTx } from '../models';
export interface BuyerFeeSignatureRequest {
    fee: number;
    orderForm: OrderForm;
}
export interface GetOrderBidsByItemRequest {
    contract: string;
    tokenId: string;
    maker?: string;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetOrderBidsByMakerRequest {
    maker: string;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetOrderByHashRequest {
    hash: string;
}
export interface GetOrdersAllRequest {
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetSellOrdersRequest {
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetSellOrdersByCollectionRequest {
    collection: string;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetSellOrdersByItemRequest {
    contract: string;
    tokenId: string;
    maker?: string;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetSellOrdersByMakerRequest {
    maker: string;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface InvertOrderRequest {
    hash: string;
    invertOrderForm: InvertOrderForm;
}
export interface PrepareOrderCancelTransactionRequest {
    hash: string;
}
export interface PrepareOrderTransactionRequest {
    hash: string;
    prepareOrderTxForm: PrepareOrderTxForm;
}
export interface PrepareOrderV2TransactionRequest {
    hash: string;
    orderForm: OrderForm;
}
export interface UpdateOrderMakeStockRequest {
    hash: string;
}
export interface UpsertOrderRequest {
    orderForm: OrderForm;
}
/**
 * no description
 */
export declare class OrderControllerApi extends runtime.BaseAPI {
    /**
     */
    buyerFeeSignatureRaw(requestParameters: BuyerFeeSignatureRequest): Promise<BuyerFeeSignatureResponse>;
    /**
     */
    buyerFeeSignature(requestParameters: BuyerFeeSignatureRequest): Promise<string>;
    /**
     */
    getOrderBidsByItemRaw(requestParameters: GetOrderBidsByItemRequest): Promise<GetOrderBidsByItemResponse>;
    /**
     */
    getOrderBidsByItem(requestParameters: GetOrderBidsByItemRequest): Promise<OrdersPagination>;
    /**
     */
    getOrderBidsByMakerRaw(requestParameters: GetOrderBidsByMakerRequest): Promise<GetOrderBidsByMakerResponse>;
    /**
     */
    getOrderBidsByMaker(requestParameters: GetOrderBidsByMakerRequest): Promise<OrdersPagination>;
    /**
     */
    getOrderByHashRaw(requestParameters: GetOrderByHashRequest): Promise<GetOrderByHashResponse>;
    /**
     */
    getOrderByHash(requestParameters: GetOrderByHashRequest): Promise<Order>;
    /**
     */
    getOrdersAllRaw(requestParameters: GetOrdersAllRequest): Promise<GetOrdersAllResponse>;
    /**
     */
    getOrdersAll(requestParameters: GetOrdersAllRequest): Promise<OrdersPagination>;
    /**
     */
    getSellOrdersRaw(requestParameters: GetSellOrdersRequest): Promise<GetSellOrdersResponse>;
    /**
     */
    getSellOrders(requestParameters: GetSellOrdersRequest): Promise<OrdersPagination>;
    /**
     */
    getSellOrdersByCollectionRaw(requestParameters: GetSellOrdersByCollectionRequest): Promise<GetSellOrdersByCollectionResponse>;
    /**
     */
    getSellOrdersByCollection(requestParameters: GetSellOrdersByCollectionRequest): Promise<OrdersPagination>;
    /**
     */
    getSellOrdersByItemRaw(requestParameters: GetSellOrdersByItemRequest): Promise<GetSellOrdersByItemResponse>;
    /**
     */
    getSellOrdersByItem(requestParameters: GetSellOrdersByItemRequest): Promise<OrdersPagination>;
    /**
     */
    getSellOrdersByMakerRaw(requestParameters: GetSellOrdersByMakerRequest): Promise<GetSellOrdersByMakerResponse>;
    /**
     */
    getSellOrdersByMaker(requestParameters: GetSellOrdersByMakerRequest): Promise<OrdersPagination>;
    /**
     */
    invertOrderRaw(requestParameters: InvertOrderRequest): Promise<InvertOrderResponse>;
    /**
     */
    invertOrder(requestParameters: InvertOrderRequest): Promise<OrderForm>;
    /**
     */
    prepareOrderCancelTransactionRaw(requestParameters: PrepareOrderCancelTransactionRequest): Promise<PrepareOrderCancelTransactionResponse>;
    /**
     */
    prepareOrderCancelTransaction(requestParameters: PrepareOrderCancelTransactionRequest): Promise<PreparedOrderTx>;
    /**
     */
    prepareOrderTransactionRaw(requestParameters: PrepareOrderTransactionRequest): Promise<PrepareOrderTransactionResponse>;
    /**
     */
    prepareOrderTransaction(requestParameters: PrepareOrderTransactionRequest): Promise<PrepareOrderTxResponse>;
    /**
     */
    prepareOrderV2TransactionRaw(requestParameters: PrepareOrderV2TransactionRequest): Promise<PrepareOrderV2TransactionResponse>;
    /**
     */
    prepareOrderV2Transaction(requestParameters: PrepareOrderV2TransactionRequest): Promise<PrepareOrderTxResponse>;
    /**
     */
    updateOrderMakeStockRaw(requestParameters: UpdateOrderMakeStockRequest): Promise<UpdateOrderMakeStockResponse>;
    /**
     */
    updateOrderMakeStock(requestParameters: UpdateOrderMakeStockRequest): Promise<Order>;
    /**
     * Create or update Order
     */
    upsertOrderRaw(requestParameters: UpsertOrderRequest): Promise<UpsertOrderResponse>;
    /**
     * Create or update Order
     */
    upsertOrder(requestParameters: UpsertOrderRequest): Promise<Order>;
}
export declare type BuyerFeeSignature200 = {
    status: 200;
    value: string;
};
export declare type BuyerFeeSignature500 = {
    status: 500;
    value: OrderIndexerApiError;
};
export declare type BuyerFeeSignatureResponse = BuyerFeeSignature200 | BuyerFeeSignature500;
export declare type GetOrderBidsByItem200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetOrderBidsByItem500 = {
    status: 500;
    value: OrderIndexerApiError;
};
export declare type GetOrderBidsByItemResponse = GetOrderBidsByItem200 | GetOrderBidsByItem500;
export declare type GetOrderBidsByMaker200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetOrderBidsByMaker500 = {
    status: 500;
    value: OrderIndexerApiError;
};
export declare type GetOrderBidsByMakerResponse = GetOrderBidsByMaker200 | GetOrderBidsByMaker500;
export declare type GetOrderByHash200 = {
    status: 200;
    value: Order;
};
export declare type GetOrderByHash500 = {
    status: 500;
    value: OrderIndexerApiError;
};
export declare type GetOrderByHashResponse = GetOrderByHash200 | GetOrderByHash500;
export declare type GetOrdersAll200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetOrdersAll500 = {
    status: 500;
    value: OrderIndexerApiError;
};
export declare type GetOrdersAllResponse = GetOrdersAll200 | GetOrdersAll500;
export declare type GetSellOrders200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetSellOrders500 = {
    status: 500;
    value: OrderIndexerApiError;
};
export declare type GetSellOrdersResponse = GetSellOrders200 | GetSellOrders500;
export declare type GetSellOrdersByCollection200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetSellOrdersByCollection500 = {
    status: 500;
    value: OrderIndexerApiError;
};
export declare type GetSellOrdersByCollectionResponse = GetSellOrdersByCollection200 | GetSellOrdersByCollection500;
export declare type GetSellOrdersByItem200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetSellOrdersByItem500 = {
    status: 500;
    value: OrderIndexerApiError;
};
export declare type GetSellOrdersByItemResponse = GetSellOrdersByItem200 | GetSellOrdersByItem500;
export declare type GetSellOrdersByMaker200 = {
    status: 200;
    value: OrdersPagination;
};
export declare type GetSellOrdersByMaker500 = {
    status: 500;
    value: OrderIndexerApiError;
};
export declare type GetSellOrdersByMakerResponse = GetSellOrdersByMaker200 | GetSellOrdersByMaker500;
export declare type InvertOrder200 = {
    status: 200;
    value: OrderForm;
};
export declare type InvertOrderResponse = InvertOrder200;
export declare type PrepareOrderCancelTransaction200 = {
    status: 200;
    value: PreparedOrderTx;
};
export declare type PrepareOrderCancelTransactionResponse = PrepareOrderCancelTransaction200;
export declare type PrepareOrderTransaction200 = {
    status: 200;
    value: PrepareOrderTxResponse;
};
export declare type PrepareOrderTransactionResponse = PrepareOrderTransaction200;
export declare type PrepareOrderV2Transaction200 = {
    status: 200;
    value: PrepareOrderTxResponse;
};
export declare type PrepareOrderV2TransactionResponse = PrepareOrderV2Transaction200;
export declare type UpdateOrderMakeStock200 = {
    status: 200;
    value: Order;
};
export declare type UpdateOrderMakeStock500 = {
    status: 500;
    value: OrderIndexerApiError;
};
export declare type UpdateOrderMakeStockResponse = UpdateOrderMakeStock200 | UpdateOrderMakeStock500;
export declare type UpsertOrder200 = {
    status: 200;
    value: Order;
};
export declare type UpsertOrder500 = {
    status: 500;
    value: OrderIndexerApiError;
};
export declare type UpsertOrderResponse = UpsertOrder200 | UpsertOrder500;
