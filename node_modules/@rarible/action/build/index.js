"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionBuilder = exports.Action = void 0;
class Action {
    constructor(stages) {
        this.stages = stages;
        // @ts-ignore
        this.state = new Array(stages.length);
        this.promises = new Array(stages.length);
    }
    get ids() {
        return this.stages.map(s => s.id);
    }
    runAll() {
        return __awaiter(this, void 0, void 0, function* () {
            for (let i = 0; i < this.ids.length; i++) {
                yield this.run(i);
            }
            return yield this.result;
        });
    }
    run(idx) {
        if (idx === 0) {
            return this.runInternal(idx, null);
        }
        if (idx >= this.stages.length) {
            throw new Error(`Stage with index ${idx} not found`);
        }
        const prevState = this.state[idx - 1];
        if (prevState == null) {
            throw new Error(`Stage ${idx - 1} hasn't been run yet`);
        }
        if (prevState.status !== "resolved") {
            throw new Error(`Stage ${idx - 1} status is: ${prevState.status}`);
        }
        return this.runInternal(idx, prevState.value);
    }
    runInternal(idx, input) {
        // @ts-ignore
        const state = this.state[idx];
        if (state != null && (state.status === "pending" || state.status === "resolved")) {
            return this.promises[idx];
        }
        else {
            this.state[idx] = { status: "pending" };
            const promise = this.stages[idx].run(input);
            this.promises[idx] = promise;
            promise
                .then(r => {
                this.state[idx] = { status: "resolved", value: r };
                return r;
            })
                .catch(err => {
                this.state[idx] = { status: "rejected", error: err };
                return Promise.reject(err);
            });
            return promise;
        }
    }
    get result() {
        // @ts-ignore
        return this.run(this.stages.length - 1);
    }
}
exports.Action = Action;
class ActionBuilder {
    constructor(stages) {
        this.stages = stages;
    }
    then(stage) {
        // @ts-ignore
        return new ActionBuilder([...this.stages, stage]);
    }
    build() {
        // @ts-ignore
        return new Action(this.stages);
    }
    static create() {
        // @ts-ignore
        return new ActionBuilder([]);
    }
}
exports.ActionBuilder = ActionBuilder;
