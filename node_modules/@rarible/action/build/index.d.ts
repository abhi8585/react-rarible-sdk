declare type Arr = readonly unknown[];
declare type LastItemType<T> = T extends [...Arr, infer Last] ? Last : void;
declare type Stage<Id, T, R> = {
    id: Id;
    run: (value: T) => Promise<R>;
};
export declare class Action<Id, Rs extends Arr> {
    readonly stages: Stage<Id, unknown, unknown>[];
    private readonly state;
    private readonly promises;
    constructor(stages: Stage<Id, unknown, unknown>[]);
    get ids(): Id[];
    runAll(): Promise<LastItemType<Rs>>;
    run<T extends keyof Rs & number>(idx: T): Promise<Rs[T]>;
    private runInternal;
    get result(): Promise<LastItemType<Rs>>;
}
export declare class ActionBuilder<Id, Rs extends Arr> {
    private readonly stages;
    constructor(stages: Stage<Id, unknown, unknown>[]);
    then<T>(stage: Stage<Id, LastItemType<Rs>, T>): ActionBuilder<Id, [...Rs, T]>;
    build(): Action<Id, Rs>;
    static create<Id>(): ActionBuilder<Id, []>;
}
export {};
