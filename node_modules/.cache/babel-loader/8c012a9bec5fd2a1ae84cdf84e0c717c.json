{"ast":null,"code":"var _jsxFileName = \"/home/abhishek/Code/nft-template/src/App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Home from './pages/home';\nimport Collection from './pages/collection';\nimport Web3 from \"web3\";\nimport { createRaribleSdk, RaribleSdk } from \"@rarible/protocol-ethereum-sdk\";\nimport React from 'react';\nimport { Web3Ethereum } from \"@rarible/web3-ethereum\"; // import Html404 from './pages/html404'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NETWORK = \"rinkeby\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      provider: null,\n      accounts: [],\n      sdk: null\n    };\n  }\n\n  componentWillMount() {\n    // this.setState({ message: \"This is an updated message\" });\n    console.log(\"Component is Mounting\");\n    this.useEffect();\n  }\n\n  useEffect() {\n    if (window.ethereum) {\n      this.handleInit(); // console.log(\"going in if\")\n    } else {\n      window.addEventListener('ethereum#initialized', this.handleInit, {\n        once: true\n      });\n      setTimeout(this.handleInit, 3000); // 3 seconds\n    }\n  }\n\n  async setProvider(currentProvider) {\n    await this.setState({\n      provider: currentProvider\n    });\n    console.log(this.state.provider);\n  }\n\n  async setAccounts(accounts) {\n    await this.setState({\n      accounts: accounts\n    });\n    console.log(this.state.accounts);\n  }\n\n  async setSdk(currentSdk) {\n    await this.setState({\n      sdk: currentSdk\n    });\n    console.log(this.state.sdk);\n  }\n\n  handleInit() {\n    console.log(true);\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum && ethereum.isMetaMask) {\n      console.log('Ethereum successfully detected!');\n      this.setProvider(ethereum); // add listener on accountsChanged event to render actual address\n      // ethereum.on('accountsChanged', this.state.accounts)\n\n      ethereum.on('accountsChanged', function (accounts) {\n        this.setAccounts(accounts);\n      }); //   console.log(this.state.accounts)\n      // \t// // configure web3\n\n      const web3 = new Web3(ethereum); // \t// // configure raribleSdk\n\n      const raribleSdk = createRaribleSdk(new Web3Ethereum({\n        web3\n      }), NETWORK);\n      this.setSdk(raribleSdk); //   console.log(this.state.sdk);\n      // // set current account if already connected\n\n      web3.eth.getAccounts().then(e => {\n        // this.setAccounts(e)\n        console.log(e);\n      });\n    } else {\n      console.log('Please install MetaMask!');\n    }\n  }\n\n  render() {\n    var _this$state$provider;\n\n    if (!((_this$state$provider = this.state.provider) === null || _this$state$provider === void 0 ? void 0 : _this$state$provider.isMetaMask)) {\n      return /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Please install metamask to use the app\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }, this);\n    } else {\n      if (this.state.sdk) {\n        /*#__PURE__*/\n        _jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }, this); // return <Dashboard provider={provider} sdk={sdk} accounts={accounts}/>\n\n\n        console.log(\"renderred template\");\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Sdk not initialized\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 16\n        }, this);\n      }\n    } // return (\n    //   <div>\n    //   <Home />\n    //   {/* <Html404 /> */}\n    // </div>\n    // )\n\n  }\n\n} // function App() {\n//   return (\n//     <div>\n//       <Home />\n//       {/* <Html404 /> */}\n//     </div>\n//   )\n// }\n\n\nexport default App;","map":{"version":3,"sources":["/home/abhishek/Code/nft-template/src/App.js"],"names":["Home","Collection","Web3","createRaribleSdk","RaribleSdk","React","Web3Ethereum","NETWORK","App","Component","constructor","props","state","provider","accounts","sdk","componentWillMount","console","log","useEffect","window","ethereum","handleInit","addEventListener","once","setTimeout","setProvider","currentProvider","setState","setAccounts","setSdk","currentSdk","isMetaMask","on","web3","raribleSdk","eth","getAccounts","then","e","render"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport Home from './pages/home'\nimport Collection from './pages/collection';\nimport Web3 from \"web3\"\nimport { createRaribleSdk, RaribleSdk } from \"@rarible/protocol-ethereum-sdk\"\nimport React from 'react'\nimport { Web3Ethereum } from \"@rarible/web3-ethereum\"\n\n// import Html404 from './pages/html404'\n\nconst NETWORK = \"rinkeby\"\n\nclass App extends React.Component {\n\n\n  constructor(props){\n    super(props)\n    this.state = {\n\n      provider : null,\n      accounts : [],\n      sdk:null,\n\n    }\n  }\n\n\n  componentWillMount() {\n\n    // this.setState({ message: \"This is an updated message\" });\n    console.log(\"Component is Mounting\")\n    this.useEffect()\n\n}\n\n  useEffect(){\n\n    if (window.ethereum) {\n\t\t\tthis.handleInit()\n      // console.log(\"going in if\")\n\t\t} else {\n\t\t\twindow.addEventListener('ethereum#initialized', this.handleInit, {\n\t\t\t\tonce: true,\n\t\t\t})\n\t\t\tsetTimeout(this.handleInit, 3000) // 3 seconds\n\t\t}\n\n  }\n\n\n  async setProvider(currentProvider){\n    await this.setState({ provider: currentProvider });\n    console.log(this.state.provider);\n  }\n\n\n  async setAccounts(accounts){\n    await this.setState({ accounts: accounts });\n    console.log(this.state.accounts);\n  }\n\n\n  async setSdk(currentSdk){\n      await this.setState({ sdk : currentSdk })\n      console.log(this.state.sdk);\n  }\n\n  handleInit(){\n    console.log(true)\n    const { ethereum } = window\n\t\tif (ethereum && ethereum.isMetaMask) {\n\t\t\tconsole.log('Ethereum successfully detected!')\n\t\t\tthis.setProvider(ethereum)\n\n\t\t\t// add listener on accountsChanged event to render actual address\n\t\t\t// ethereum.on('accountsChanged', this.state.accounts)\n      ethereum.on('accountsChanged', function (accounts) {this.setAccounts(accounts)\n    });\n    //   console.log(this.state.accounts)\n\t\t// \t// // configure web3\n\t\t\tconst web3 = new Web3(ethereum)\n\t\t// \t// // configure raribleSdk\n\t\t\tconst raribleSdk = createRaribleSdk(new Web3Ethereum({ web3 }), NETWORK)\n\t\t\tthis.setSdk(raribleSdk)\n    //   console.log(this.state.sdk);\n\t\t\t// // set current account if already connected\n\t\t\tweb3.eth.getAccounts().then(e => {\n\t\t\t\t// this.setAccounts(e)\n        console.log(e)\n\t\t\t})\n\t\t} else {\n\t\t\tconsole.log('Please install MetaMask!')\n\t\t}\n  }\n\n  render() {\n\n    if (!this.state.provider?.isMetaMask) {\n      return (<strong>Please install metamask to use the app</strong>)\n    } else {\n      if (this.state.sdk) {\n        <Home />\n        // return <Dashboard provider={provider} sdk={sdk} accounts={accounts}/>\n        console.log(\"renderred template\")\n      } else {\n        return <strong>Sdk not initialized</strong>\n      }\n    }\n  \n    // return (\n    //   <div>\n    //   <Home />\n    //   {/* <Html404 /> */}\n\n    // </div>\n    // )\n  }  \n\n}\n\n\n// function App() {\n\n//   return (\n\n//     <div>\n//       <Home />\n//       {/* <Html404 /> */}\n\n//     </div>\n//   )\n\n// }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}