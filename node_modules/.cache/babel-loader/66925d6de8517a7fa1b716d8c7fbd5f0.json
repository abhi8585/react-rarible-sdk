{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.invertOrder = void 0;\n\nvar types_1 = require(\"@rarible/types\");\n\nvar to_bn_1 = require(\"../common/to-bn\");\n\nvar is_nft_1 = require(\"./is-nft\");\n\nvar ZERO = types_1.toWord(\"0x0000000000000000000000000000000000000000000000000000000000000000\");\n\nfunction invertOrder(order, amount, maker, salt) {\n  if (salt === void 0) {\n    salt = ZERO;\n  }\n\n  var _a = calculateAmounts(to_bn_1.toBn(order.make.value), to_bn_1.toBn(order.take.value), amount, is_nft_1.isNft(order.take.assetType)),\n      makeValue = _a[0],\n      takeValue = _a[1];\n\n  return __assign(__assign({}, order), {\n    make: __assign(__assign({}, order.take), {\n      value: types_1.toBigNumber(makeValue.toString())\n    }),\n    take: __assign(__assign({}, order.make), {\n      value: types_1.toBigNumber(takeValue.toString())\n    }),\n    maker: maker,\n    taker: order.maker,\n    salt: salt,\n    signature: undefined\n  });\n}\n\nexports.invertOrder = invertOrder;\n\nfunction calculateAmounts(make, take, amount, bid) {\n  if (bid) {\n    return [amount, amount.multipliedBy(make).div(take)];\n  } else {\n    return [amount.multipliedBy(take).div(make), amount];\n  }\n}","map":{"version":3,"sources":["/home/abhishek/Code/nft-template/node_modules/@rarible/protocol-ethereum-sdk/build/order/invert-order.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","invertOrder","types_1","require","to_bn_1","is_nft_1","ZERO","toWord","order","amount","maker","salt","_a","calculateAmounts","toBn","make","take","isNft","assetType","makeValue","takeValue","toBigNumber","toString","taker","signature","undefined","bid","multipliedBy","div"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.invertOrder = void 0;\nvar types_1 = require(\"@rarible/types\");\nvar to_bn_1 = require(\"../common/to-bn\");\nvar is_nft_1 = require(\"./is-nft\");\nvar ZERO = types_1.toWord(\"0x0000000000000000000000000000000000000000000000000000000000000000\");\nfunction invertOrder(order, amount, maker, salt) {\n    if (salt === void 0) { salt = ZERO; }\n    var _a = calculateAmounts(to_bn_1.toBn(order.make.value), to_bn_1.toBn(order.take.value), amount, is_nft_1.isNft(order.take.assetType)), makeValue = _a[0], takeValue = _a[1];\n    return __assign(__assign({}, order), { make: __assign(__assign({}, order.take), { value: types_1.toBigNumber(makeValue.toString()) }), take: __assign(__assign({}, order.make), { value: types_1.toBigNumber(takeValue.toString()) }), maker: maker, taker: order.maker, salt: salt, signature: undefined });\n}\nexports.invertOrder = invertOrder;\nfunction calculateAmounts(make, take, amount, bid) {\n    if (bid) {\n        return [amount, amount.multipliedBy(make).div(take)];\n    }\n    else {\n        return [amount.multipliedBy(take).div(make), amount];\n    }\n}\n"]},"metadata":{},"sourceType":"script"}