{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.randomBinary = exports.toBinary = void 0;\n\nfunction toBinary(value) {\n  let hex;\n\n  if (value.startsWith(\"0x\")) {\n    hex = value.substring(2).toLowerCase();\n  } else {\n    hex = value.toLowerCase();\n  }\n\n  const re = /[0-9a-f]*/g;\n\n  if (re.test(hex)) {\n    return `0x${hex}`;\n  } else {\n    throw new Error(`not a binary: ${value}`);\n  }\n}\n\nexports.toBinary = toBinary;\n\nfunction randomBinary(size) {\n  return `0x${Array.from(Array(size * 2)).map(() => Math.floor(Math.random() * 16).toString(16)).join(\"\")}`;\n}\n\nexports.randomBinary = randomBinary;","map":{"version":3,"sources":["/home/abhishek/Code/nft-template/node_modules/@rarible/types/build/binary.js"],"names":["Object","defineProperty","exports","value","randomBinary","toBinary","hex","startsWith","substring","toLowerCase","re","test","Error","size","Array","from","map","Math","floor","random","toString","join"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuBF,OAAO,CAACG,QAAR,GAAmB,KAAK,CAA/C;;AACA,SAASA,QAAT,CAAkBF,KAAlB,EAAyB;AACrB,MAAIG,GAAJ;;AACA,MAAIH,KAAK,CAACI,UAAN,CAAiB,IAAjB,CAAJ,EAA4B;AACxBD,IAAAA,GAAG,GAAGH,KAAK,CAACK,SAAN,CAAgB,CAAhB,EAAmBC,WAAnB,EAAN;AACH,GAFD,MAGK;AACDH,IAAAA,GAAG,GAAGH,KAAK,CAACM,WAAN,EAAN;AACH;;AACD,QAAMC,EAAE,GAAG,YAAX;;AACA,MAAIA,EAAE,CAACC,IAAH,CAAQL,GAAR,CAAJ,EAAkB;AACd,WAAQ,KAAIA,GAAI,EAAhB;AACH,GAFD,MAGK;AACD,UAAM,IAAIM,KAAJ,CAAW,iBAAgBT,KAAM,EAAjC,CAAN;AACH;AACJ;;AACDD,OAAO,CAACG,QAAR,GAAmBA,QAAnB;;AACA,SAASD,YAAT,CAAsBS,IAAtB,EAA4B;AACxB,SAAQ,KAAIC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACD,IAAI,GAAG,CAAR,CAAhB,EACPG,GADO,CACH,MAAMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,EAA+BC,QAA/B,CAAwC,EAAxC,CADH,EAEPC,IAFO,CAEF,EAFE,CAEE,EAFd;AAGH;;AACDnB,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBinary = exports.toBinary = void 0;\nfunction toBinary(value) {\n    let hex;\n    if (value.startsWith(\"0x\")) {\n        hex = value.substring(2).toLowerCase();\n    }\n    else {\n        hex = value.toLowerCase();\n    }\n    const re = /[0-9a-f]*/g;\n    if (re.test(hex)) {\n        return `0x${hex}`;\n    }\n    else {\n        throw new Error(`not a binary: ${value}`);\n    }\n}\nexports.toBinary = toBinary;\nfunction randomBinary(size) {\n    return `0x${Array.from(Array(size * 2))\n        .map(() => Math.floor(Math.random() * 16).toString(16))\n        .join(\"\")}`;\n}\nexports.randomBinary = randomBinary;\n"]},"metadata":{},"sourceType":"script"}