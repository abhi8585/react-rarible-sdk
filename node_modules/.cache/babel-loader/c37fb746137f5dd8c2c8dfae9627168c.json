{"ast":null,"code":"var _jsxFileName = \"/home/abhishek/Code/nft-template/src/pages/file-upload.js\";\nimport React, { Component } from 'react';\nimport SimpleStorageContract from '../build/contracts/SimpleStorage.json';\nimport getWeb3 from './utils/getWeb3';\nimport ipfs from './ipfs';\nimport './css/oswald.css';\nimport './css/open-sans.css';\nimport './css/pure-min.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FileUpload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ipfsHash: '',\n      web3: null,\n      buffer: null,\n      account: null\n    };\n    this.captureFile = this.captureFile.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentWillMount() {\n    // Get network provider and web3 instance.\n    // See utils/getWeb3 for more info.\n    getWeb3.then(results => {\n      this.setState({\n        web3: results.web3\n      }); // Instantiate contract once web3 provided.\n\n      this.instantiateContract();\n    }).catch(() => {\n      console.log('Error finding web3.');\n    });\n  }\n\n  instantiateContract() {\n    /*\n     * SMART CONTRACT EXAMPLE\n     *\n     * Normally these functions would be called in the context of a\n     * state management library, but for convenience I've placed them here.\n     */\n    const contract = require('truffle-contract');\n\n    const simpleStorage = contract(SimpleStorageContract);\n    simpleStorage.setProvider(this.state.web3.currentProvider); // Get accounts.\n\n    this.state.web3.eth.getAccounts((error, accounts) => {\n      simpleStorage.deployed().then(instance => {\n        this.simpleStorageInstance = instance;\n        this.setState({\n          account: accounts[0]\n        }); // Get the value from the contract to prove it worked.\n\n        return this.simpleStorageInstance.get.call(accounts[0]);\n      }).then(ipfsHash => {\n        // Update state with the result.\n        return this.setState({\n          ipfsHash\n        });\n      });\n    });\n  }\n\n  captureFile(event) {\n    event.preventDefault();\n    const file = event.target.files[0];\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n\n    reader.onloadend = () => {\n      this.setState({\n        buffer: Buffer(reader.result)\n      });\n      console.log('buffer', this.state.buffer);\n    };\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    ipfs.files.add(this.state.buffer, (error, result) => {\n      if (error) {\n        console.error(error);\n        return;\n      }\n\n      this.simpleStorageInstance.set(result[0].hash, {\n        from: this.state.account\n      }).then(r => {\n        return this.setState({\n          ipfsHash: result[0].hash\n        });\n        console.log('ifpsHash', this.state.ipfsHash);\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"navbar pure-menu pure-menu-horizontal\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          className: \"pure-menu-heading pure-menu-link\",\n          children: \"IPFS File Upload DApp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pure-g\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pure-u-1-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Your Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"This image is stored on IPFS & The Ethereum Blockchain!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `https://ipfs.io/ipfs/${this.state.ipfsHash}`,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Upload Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: this.onSubmit,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                onChange: this.captureFile\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default FileUpload;","map":{"version":3,"sources":["/home/abhishek/Code/nft-template/src/pages/file-upload.js"],"names":["React","Component","SimpleStorageContract","getWeb3","ipfs","FileUpload","constructor","props","state","ipfsHash","web3","buffer","account","captureFile","bind","onSubmit","componentWillMount","then","results","setState","instantiateContract","catch","console","log","contract","require","simpleStorage","setProvider","currentProvider","eth","getAccounts","error","accounts","deployed","instance","simpleStorageInstance","get","call","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","Buffer","result","add","set","hash","from","r","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport SimpleStorageContract from '../build/contracts/SimpleStorage.json'\nimport getWeb3 from './utils/getWeb3'\nimport ipfs from './ipfs'\n\nimport './css/oswald.css'\nimport './css/open-sans.css'\nimport './css/pure-min.css'\nimport './App.css'\n\nclass FileUpload extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      ipfsHash: '',\n      web3: null,\n      buffer: null,\n      account: null\n    }\n    this.captureFile = this.captureFile.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentWillMount() {\n    // Get network provider and web3 instance.\n    // See utils/getWeb3 for more info.\n\n    getWeb3\n    .then(results => {\n      this.setState({\n        web3: results.web3\n      })\n\n      // Instantiate contract once web3 provided.\n      this.instantiateContract()\n    })\n    .catch(() => {\n      console.log('Error finding web3.')\n    })\n  }\n\n  instantiateContract() {\n    /*\n     * SMART CONTRACT EXAMPLE\n     *\n     * Normally these functions would be called in the context of a\n     * state management library, but for convenience I've placed them here.\n     */\n\n    const contract = require('truffle-contract')\n    const simpleStorage = contract(SimpleStorageContract)\n    simpleStorage.setProvider(this.state.web3.currentProvider)\n\n    // Get accounts.\n    this.state.web3.eth.getAccounts((error, accounts) => {\n      simpleStorage.deployed().then((instance) => {\n        this.simpleStorageInstance = instance\n        this.setState({ account: accounts[0] })\n        // Get the value from the contract to prove it worked.\n        return this.simpleStorageInstance.get.call(accounts[0])\n      }).then((ipfsHash) => {\n        // Update state with the result.\n        return this.setState({ ipfsHash })\n      })\n    })\n  }\n\n  captureFile(event) {\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  onSubmit(event) {\n    event.preventDefault()\n    ipfs.files.add(this.state.buffer, (error, result) => {\n      if(error) {\n        console.error(error)\n        return\n      }\n      this.simpleStorageInstance.set(result[0].hash, { from: this.state.account }).then((r) => {\n        return this.setState({ ipfsHash: result[0].hash })\n        console.log('ifpsHash', this.state.ipfsHash)\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar pure-menu pure-menu-horizontal\">\n          <a href=\"#\" className=\"pure-menu-heading pure-menu-link\">IPFS File Upload DApp</a>\n        </nav>\n\n        <main className=\"container\">\n          <div className=\"pure-g\">\n            <div className=\"pure-u-1-1\">\n              <h1>Your Image</h1>\n              <p>This image is stored on IPFS & The Ethereum Blockchain!</p>\n              <img src={`https://ipfs.io/ipfs/${this.state.ipfsHash}`} alt=\"\"/>\n              <h2>Upload Image</h2>\n              <form onSubmit={this.onSubmit} >\n                <input type='file' onChange={this.captureFile} />\n                <input type='submit' />\n              </form>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default FileUpload\n"]},"metadata":{},"sourceType":"module"}