{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashLegacyOrder = void 0;\n\nvar to_legacy_asset_type_1 = require(\"./to-legacy-asset-type\");\n\nvar web3_1 = __importDefault(require(\"web3\"));\n\nvar abi_1 = require(\"./abi\");\n\nfunction hashLegacyOrder(order) {\n  if (order.type !== \"RARIBLE_V1\") {\n    throw new Error(\"Not supported type: \" + order.type);\n  }\n\n  var data = order.data;\n\n  if (data.dataType !== \"LEGACY\") {\n    throw new Error(\"Not supported data type: \" + data.dataType);\n  }\n\n  var makeType = to_legacy_asset_type_1.toLegacyAssetType(order.make.assetType);\n  var takeType = to_legacy_asset_type_1.toLegacyAssetType(order.take.assetType);\n  var struct = {\n    key: {\n      owner: order.maker,\n      salt: order.salt,\n      sellAsset: makeType,\n      buyAsset: takeType\n    },\n    selling: order.make.value,\n    buying: order.take.value,\n    sellerFee: data.fee\n  };\n  return web3_1.default.utils.sha3(abi_1.abi.encodeParameter({\n    \"Order\": ORDER\n  }, struct));\n}\n\nexports.hashLegacyOrder = hashLegacyOrder;\nvar ASSET = {\n  \"token\": \"address\",\n  \"tokenId\": \"uint256\",\n  \"assetType\": \"uint8\"\n};\nvar ORDER = {\n  \"key\": {\n    \"owner\": \"address\",\n    \"salt\": \"uint256\",\n    \"sellAsset\": ASSET,\n    \"buyAsset\": ASSET\n  },\n  \"selling\": \"uint256\",\n  \"buying\": \"uint256\",\n  \"sellerFee\": \"uint256\"\n};","map":{"version":3,"sources":["/home/abhishek/Code/nft-template/node_modules/@rarible/protocol-ethereum-sdk/build/order/hash-legacy-order.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","hashLegacyOrder","to_legacy_asset_type_1","require","web3_1","abi_1","order","type","Error","data","dataType","makeType","toLegacyAssetType","make","assetType","takeType","take","struct","key","owner","maker","salt","sellAsset","buyAsset","selling","buying","sellerFee","fee","default","utils","sha3","abi","encodeParameter","ORDER","ASSET"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;;AACA,IAAIC,sBAAsB,GAAGC,OAAO,CAAC,wBAAD,CAApC;;AACA,IAAIC,MAAM,GAAGV,eAAe,CAACS,OAAO,CAAC,MAAD,CAAR,CAA5B;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,OAAD,CAAnB;;AACA,SAASF,eAAT,CAAyBK,KAAzB,EAAgC;AAC5B,MAAIA,KAAK,CAACC,IAAN,KAAe,YAAnB,EAAiC;AAC7B,UAAM,IAAIC,KAAJ,CAAU,yBAAyBF,KAAK,CAACC,IAAzC,CAAN;AACH;;AACD,MAAIE,IAAI,GAAGH,KAAK,CAACG,IAAjB;;AACA,MAAIA,IAAI,CAACC,QAAL,KAAkB,QAAtB,EAAgC;AAC5B,UAAM,IAAIF,KAAJ,CAAU,8BAA8BC,IAAI,CAACC,QAA7C,CAAN;AACH;;AACD,MAAIC,QAAQ,GAAGT,sBAAsB,CAACU,iBAAvB,CAAyCN,KAAK,CAACO,IAAN,CAAWC,SAApD,CAAf;AACA,MAAIC,QAAQ,GAAGb,sBAAsB,CAACU,iBAAvB,CAAyCN,KAAK,CAACU,IAAN,CAAWF,SAApD,CAAf;AACA,MAAIG,MAAM,GAAG;AACTC,IAAAA,GAAG,EAAE;AACDC,MAAAA,KAAK,EAAEb,KAAK,CAACc,KADZ;AAEDC,MAAAA,IAAI,EAAEf,KAAK,CAACe,IAFX;AAGDC,MAAAA,SAAS,EAAEX,QAHV;AAIDY,MAAAA,QAAQ,EAAER;AAJT,KADI;AAOTS,IAAAA,OAAO,EAAElB,KAAK,CAACO,IAAN,CAAWb,KAPX;AAQTyB,IAAAA,MAAM,EAAEnB,KAAK,CAACU,IAAN,CAAWhB,KARV;AAST0B,IAAAA,SAAS,EAAEjB,IAAI,CAACkB;AATP,GAAb;AAWA,SAAOvB,MAAM,CAACwB,OAAP,CAAeC,KAAf,CAAqBC,IAArB,CAA0BzB,KAAK,CAAC0B,GAAN,CAAUC,eAAV,CAA0B;AAAE,aAASC;AAAX,GAA1B,EAA8ChB,MAA9C,CAA1B,CAAP;AACH;;AACDlB,OAAO,CAACE,eAAR,GAA0BA,eAA1B;AACA,IAAIiC,KAAK,GAAG;AACR,WAAS,SADD;AAER,aAAW,SAFH;AAGR,eAAa;AAHL,CAAZ;AAKA,IAAID,KAAK,GAAG;AACR,SAAO;AACH,aAAS,SADN;AAEH,YAAQ,SAFL;AAGH,iBAAaC,KAHV;AAIH,gBAAYA;AAJT,GADC;AAOR,aAAW,SAPH;AAQR,YAAU,SARF;AASR,eAAa;AATL,CAAZ","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashLegacyOrder = void 0;\nvar to_legacy_asset_type_1 = require(\"./to-legacy-asset-type\");\nvar web3_1 = __importDefault(require(\"web3\"));\nvar abi_1 = require(\"./abi\");\nfunction hashLegacyOrder(order) {\n    if (order.type !== \"RARIBLE_V1\") {\n        throw new Error(\"Not supported type: \" + order.type);\n    }\n    var data = order.data;\n    if (data.dataType !== \"LEGACY\") {\n        throw new Error(\"Not supported data type: \" + data.dataType);\n    }\n    var makeType = to_legacy_asset_type_1.toLegacyAssetType(order.make.assetType);\n    var takeType = to_legacy_asset_type_1.toLegacyAssetType(order.take.assetType);\n    var struct = {\n        key: {\n            owner: order.maker,\n            salt: order.salt,\n            sellAsset: makeType,\n            buyAsset: takeType,\n        },\n        selling: order.make.value,\n        buying: order.take.value,\n        sellerFee: data.fee\n    };\n    return web3_1.default.utils.sha3(abi_1.abi.encodeParameter({ \"Order\": ORDER }, struct));\n}\nexports.hashLegacyOrder = hashLegacyOrder;\nvar ASSET = {\n    \"token\": \"address\",\n    \"tokenId\": \"uint256\",\n    \"assetType\": \"uint8\",\n};\nvar ORDER = {\n    \"key\": {\n        \"owner\": \"address\",\n        \"salt\": \"uint256\",\n        \"sellAsset\": ASSET,\n        \"buyAsset\": ASSET,\n    },\n    \"selling\": \"uint256\",\n    \"buying\": \"uint256\",\n    \"sellerFee\": \"uint256\",\n};\n"]},"metadata":{},"sourceType":"script"}