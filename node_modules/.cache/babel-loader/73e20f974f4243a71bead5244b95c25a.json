{"ast":null,"code":"var _jsxFileName = \"/home/abhishek/Code/nft-template/src/pages/file-upload.js\";\nimport React, { Component } from 'react'; // import SimpleStorageContract from '../build/contracts/SimpleStorage.json'\n// import getWeb3 from './utils/getWeb3'\n\nimport ipfs from './ipfs'; // import './css/oswald.css'\n// import './css/open-sans.css'\n// import './css/pure-min.css'\n// import './App.css'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FileUpload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ipfsHash: '',\n      web3: null,\n      buffer: null,\n      account: null\n    };\n    this.captureFile = this.captureFile.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  } // componentWillMount() {\n  //   // Get network provider and web3 instance.\n  //   // See utils/getWeb3 for more info.\n  //   getWeb3\n  //   .then(results => {\n  //     this.setState({\n  //       web3: results.web3\n  //     })\n  //     // Instantiate contract once web3 provided.\n  //     this.instantiateContract()\n  //   })\n  //   .catch(() => {\n  //     console.log('Error finding web3.')\n  //   })\n  // }\n\n\n  instantiateContract() {\n    /*\n     * SMART CONTRACT EXAMPLE\n     *\n     * Normally these functions would be called in the context of a\n     * state management library, but for convenience I've placed them here.\n     */\n    console.log(true); // const contract = require('truffle-contract')\n    // const simpleStorage = contract(SimpleStorageContract)\n    // simpleStorage.setProvider(this.state.web3.currentProvider)\n    // // Get accounts.\n    // this.state.web3.eth.getAccounts((error, accounts) => {\n    //   simpleStorage.deployed().then((instance) => {\n    //     this.simpleStorageInstance = instance\n    //     this.setState({ account: accounts[0] })\n    //     // Get the value from the contract to prove it worked.\n    //     return this.simpleStorageInstance.get.call(accounts[0])\n    //   }).then((ipfsHash) => {\n    //     // Update state with the result.\n    //     return this.setState({ ipfsHash })\n    //   })\n    // })\n  }\n\n  captureFile(event) {\n    event.preventDefault();\n    const file = event.target.files[0];\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n\n    reader.onloadend = () => {\n      this.setState({\n        buffer: Buffer(reader.result)\n      });\n      console.log('buffer', this.state.buffer);\n    };\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    ipfs.files.add(this.state.buffer, (error, result) => {\n      if (error) {\n        console.error(error);\n        return;\n      }\n\n      console.log(result[0].hash); // this.simpleStorageInstance.set(result[0].hash, { from: this.state.account }).then((r) => {\n      //   return this.setState({ ipfsHash: result[0].hash })\n      //   console.log('ifpsHash', this.state.ipfsHash)\n    }); // })\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"navbar pure-menu pure-menu-horizontal\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          className: \"pure-menu-heading pure-menu-link\",\n          children: \"IPFS File Upload DApp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pure-g\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pure-u-1-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Your Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"This image is stored on IPFS & The Ethereum Blockchain!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `https://ipfs.io/ipfs/${this.state.ipfsHash}`,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Upload Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: this.onSubmit,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                onChange: this.captureFile\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default FileUpload;","map":{"version":3,"sources":["/home/abhishek/Code/nft-template/src/pages/file-upload.js"],"names":["React","Component","ipfs","FileUpload","constructor","props","state","ipfsHash","web3","buffer","account","captureFile","bind","onSubmit","instantiateContract","console","log","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","Buffer","result","add","error","hash","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n// import SimpleStorageContract from '../build/contracts/SimpleStorage.json'\n// import getWeb3 from './utils/getWeb3'\nimport ipfs from './ipfs'\n\n// import './css/oswald.css'\n// import './css/open-sans.css'\n// import './css/pure-min.css'\n// import './App.css'\n\nclass FileUpload extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      ipfsHash: '',\n      web3: null,\n      buffer: null,\n      account: null\n    }\n    this.captureFile = this.captureFile.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  // componentWillMount() {\n  //   // Get network provider and web3 instance.\n  //   // See utils/getWeb3 for more info.\n\n  //   getWeb3\n  //   .then(results => {\n  //     this.setState({\n  //       web3: results.web3\n  //     })\n\n  //     // Instantiate contract once web3 provided.\n  //     this.instantiateContract()\n  //   })\n  //   .catch(() => {\n  //     console.log('Error finding web3.')\n  //   })\n  // }\n\n  instantiateContract() {\n    /*\n     * SMART CONTRACT EXAMPLE\n     *\n     * Normally these functions would be called in the context of a\n     * state management library, but for convenience I've placed them here.\n     */\n    console.log(true)\n    // const contract = require('truffle-contract')\n    // const simpleStorage = contract(SimpleStorageContract)\n    // simpleStorage.setProvider(this.state.web3.currentProvider)\n\n    // // Get accounts.\n    // this.state.web3.eth.getAccounts((error, accounts) => {\n    //   simpleStorage.deployed().then((instance) => {\n    //     this.simpleStorageInstance = instance\n    //     this.setState({ account: accounts[0] })\n    //     // Get the value from the contract to prove it worked.\n    //     return this.simpleStorageInstance.get.call(accounts[0])\n    //   }).then((ipfsHash) => {\n    //     // Update state with the result.\n    //     return this.setState({ ipfsHash })\n    //   })\n    // })\n  }\n\n  captureFile(event) {\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  onSubmit(event) {\n    event.preventDefault()\n    ipfs.files.add(this.state.buffer, (error, result) => {\n      if(error) {\n        console.error(error)\n        return \n      }\n      console.log(result[0].hash)\n      // this.simpleStorageInstance.set(result[0].hash, { from: this.state.account }).then((r) => {\n      //   return this.setState({ ipfsHash: result[0].hash })\n      //   console.log('ifpsHash', this.state.ipfsHash)\n      })\n    // })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar pure-menu pure-menu-horizontal\">\n          <a href=\"#\" className=\"pure-menu-heading pure-menu-link\">IPFS File Upload DApp</a>\n        </nav>\n\n        <main className=\"container\">\n          <div className=\"pure-g\">\n            <div className=\"pure-u-1-1\">\n              <h1>Your Image</h1>\n              <p>This image is stored on IPFS & The Ethereum Blockchain!</p>\n              <img src={`https://ipfs.io/ipfs/${this.state.ipfsHash}`} alt=\"\"/>\n              <h2>Upload Image</h2>\n              <form onSubmit={this.onSubmit} >\n                <input type='file' onChange={this.captureFile} />\n                <input type='submit' />\n              </form>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default FileUpload\n"]},"metadata":{},"sourceType":"module"}